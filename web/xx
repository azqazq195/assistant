import React from 'react'

// page level

return <div>
    <UserProfile />
    <UserInfo />
</div>

type {
    get~~~ : ():Promise<DTO> => {}
}

Promise<{signUp: ():}>

client - api server(외부) - db

api server response body

page 에서 필요한걸 모두 담아주는 경우 => page => view component 에 뿌리기
특정 컴포넌트에서 필요한걸 모두 담아주는 경우 => page => view component 에 뿌리기

회원정보 => 프로필, 메인, 수정페이지

entity raw data => 얘를 실제로 쓸 view component 호출, page에서 불러도 됨

a page state => global count = 0 => count = 1
b page state => get count = 0

서로 다른 page에서 쓰는 state => provider or query
같은 page => 다른 컴포넌트에서 쓰는 state => global O, X
같은 page => 한 컴포넌트에서만 쓰는 state => global X

const UserProfile = ()=>{
    useEffect(()=>{
        axios.get(~~~)
    },[])

    return <div>뷰들</div>
}

state => view component, hook

<NameInput/>
<PasswordInput />
<PasswordInput />
<PasswordInput />

const InputComponent = ({state, ...usePasswordValidation}) => {

    // view <> logic 분리하기 위한 작업

    // usePasswordInputValidation
    // useUsernameInputValidation

  return (
    <>
        <div>아이디</div>
        <input value={state} onChange={()=>{setState(state)}} />
        <div>아이디는 4글자로 입력해주세요</div>
        {isShownWarningMsg &&
            <div>{warningMsg}</div>
        }
    </>
  )
}

export default test

const usePasswordInputComponentProps = ({pass1, pass2}) => {
    // view <> logic 분리하기 위한 작업
    // state와 관련된 재사용될 로직
    // usePasswordInputValidation
    const [isWarningSh, setIsWarn] = useState<boolean>(false);

    useEffect(()=>{
        // warning state 변경
        // pass1, pass2 비교 후 state 변경
    },[])
    //

  return (
    isWarningSh,
    warningMsg,
    ,
    ,
    ,
    ,
    ,
  )
}

const useNameInputValidation = ({pass1, pass2}) => {
    // view <> logic 분리하기 위한 작업
    // state와 관련된 재사용될 로직
    // usePasswordInputValidation
    const [isWarningSh, setIsWarn] = useState<boolean>(false);

    useEffect(()=>{
        // warning state 변경
        // pass1, pass2 비교 후 state 변경
    },[])
    //

  return (
    isWarningSh
  )
}
